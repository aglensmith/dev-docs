{"path":"api-docs/cart-and-checkout/embedded-checkout/embedded-checkout-tutorial","templateID":0,"sharedPropsHashes":{"nav":"ZHaw9F","sidebarTree":"Z427i9","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Cart and Checkout","to":"/api-docs/cart-and-checkout"},{"content":"Embedded Checkout","to":"/api-docs/cart-and-checkout/embedded-checkout"},{"content":"Embedded Checkout Tutorial","to":"/api-docs/cart-and-checkout/embedded-checkout/embedded-checkout-tutorial"}],"page":{"meta":{"title":"Embedded Checkout Tutorial - Embedded Checkout - Cart and Checkout - API Docs","url":"/api-docs/cart-and-checkout/embedded-checkout/embedded-checkout-tutorial","description":"Embedded Checkout\n\n\n\nOn This Page\n\nStep 1: Create a Channel\n\nStep 2: Create a Site\n\nStep 3: Create a Cart\n\nStep 4: Embed Checkout\n\nFAQ\n\n\n\nEmbedded Check..."},"title":"Embedded Checkout Tutorial","parsedPath":["pages","/api-docs","data","children",6,"data","children",4,"data","children",1],"rootPagePath":"/api-docs","path":"/api-docs/cart-and-checkout/embedded-checkout/embedded-checkout-tutorial","isSubpage":true,"route":{"path":"/embedded-checkout-tutorial"},"data":{"blocks":[{"type":"text","data":"# Embedded Checkout\n\n<div class=\"otp\" id=\"no-index\">\n\n### On This Page\n- [Step 1: Create a Channel](#step-1-create-a-channel)\n- [Step 2: Create a Site](#step-2-create-a-site)\n- [Step 3: Create a Cart](#step-3-create-a-cart)\n- [Step 4: Embed Checkout](#step-4-embed-checkout)\n- [FAQ](#faq)\n\n</div>\n\nEmbedded Checkout lets you place BigCommerce’s Optimized One-Page checkout onto an external site. This tutorial will walk you through the sequence of API calls your application should make to create a working Embedded Checkout. \n\nThis article assumes you have familiarity with the following concepts:\n\n* Creating and managing a server-side application\n* Making and recieving API calls from within your app\n* Using your application to make changes to a front end\n\n### Prerequisites\n\n* Store API credentials (see [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication#authentication_getting-api-credentials) for details) with the following permissions:\n\t- **Carts:** `Modify`\n\t- **Channel Settings:** `Modify`\n\t- **Sites & Routes:** `Modify`\n\t- **Products:** `Read Only`\n\nEmbedded Checkout also requires the [BigCommerce JS Checkout SDK](https://github.com/bigcommerce/checkout-sdk-js) to be accessible in the browser.\n\n\n## Step 1: Create a Channel\n\nTo allow the external website to serve the BigCommerce checkout, create a new Channel by sending a `POST` request to the [/channels](https://developer.bigcommerce.com/api-reference/cart-checkout/channels-listings-api/channels/createchannel) endpoint:\n\n**`POST`** `https://api.bigcommerce.com/stores/{{store_hash}}/V3/channels`\n\n```json\n{\n    \"type\": \"storefront\",\n    \"platform\": \"custom\",\n    \"name\": \"https://{your-site}.com\"\n}\n```\n\nThe response will contain an `id` (use this as the `channel_id` in future requests):\n\t\n```json\n\n{\n    \"data\": {\n        \"id\": 20266,\n        \"name\": \"https://www.{your-site}.com\",\n        \"platform\": \"custom\",\n        \"type\": \"storefront\",\n        \"date_created\": \"2019-09-18T22:28:36Z\",\n        \"date_modified\": \"2019-09-18T22:28:36Z\",\n        \"external_id\": \"\",\n        \"is_enabled\": true\n    },\n    \"meta\": {}\n}\n```\n<div class=\"HubBlock--callout\">\n<div class=\"CalloutBlock--info\">\n<div class=\"HubBlock-content\">\n    \n<!-- theme:  -->\n> Channels created via API are visible in the BigCommerce store's Control Panel in **Products** > **Listed On**. The Orders section will now also include a filter for your channel.\n\n</div>\n</div>\n</div>\n\n\n## Step 2: Create a Site\n\nNext, create a site for the channel by POSTing to the [/channels/id/site endpoint](https://developer.bigcommerce.com/api-reference/cart-checkout/sites-routes-api/sites/post-channel-site):\n\n*`POST`* `https://api.bigcommerce.com/stores/{{store_hash}}/v3/channels/{{channel_id}}/site`\n\n<!--\ntitle: \"POST to Channels\"\nsubtitle: \"\"\nlineNumbers: true\n-->\n\n**Create Site POST**\n\n```js\n{\n    \"channel_id\": 15001,\n    \"url\": \"https://www.{your-site}.com\"\n}\n```\n\nThis returns `id` which you will use as the `site_id` in future requests. The `url` value is the base path for all other routes you define for the site.\n\n```js\n{\n    {\n    \"data\": {\n        \"id\": 6,\n        \"url\": \"https://www.{your-site}.com\",\n        \"channel_id\": 15001,\n        \"created_at\": \"2019-09-19T17:08:44Z\",\n        \"updated_at\": \"2019-09-19T17:08:44Z\"\n    },\n    \"meta\": {}\n    }\n}\n```\n\n\n## Step 3: Create a Cart\n\nTo proceed to checkout, we'll need an active cart. To create one, send a `POST` request to the [Server-to-Server Cart API's](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-cart-api)  `/cart` endpoint: \n\n**`POST`**  `https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts`\n\n```json\n{\n  \"channel_id\": 15001,\n  \"line_items\": [\n    {\n      \"quantity\": 1,\n      \"product_id\": 80,\n      \"variant_id\": 64\n    }\n  ]\n}\n```\n\nIf you are creating a cart for a specific customer, pass in the `customer_id` in the request: \n\n```json\n{\n  \"customer_id\": 42,\n  \"line_items\": [\n    {\n      \"quantity\": 5,\n      \"product_id\": 191\n    }\n  ]\n}\n```\n\nContained in the response is a `UUID` which we'll use as the `cart_id` in the next request. \n\t\nNext, generate a cart URL and set this cart as the active cart by posting to  to `/carts/{{cart_id}}/redirect_urls`:\n\n**`POST`** `https://api.bigcommerce.com/stores/{{store_hash}}/v3/carts/{{cart_id}}/redirect_urls`\n\t\n**Response**\n\n```json\n{\n  \"cart_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=load&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n  \"checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n  \"embedded_checkout_url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\"\n}\n```\n\n### Redirecting A Logged-In Customer to Embedded Checkout\nFor some use cases, you may want your your customer to be logged in before they can begin the checkout process.\n\nThe can be done using the [Customer Login API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api#logging-in-a-customer). \n\nYour app will need to use JSON Web Token Standard to create a new token. Use a [JWT library](https://jwt.io/#libraries-io) to accomplish this. Include the `checkout_url` as part of the request payload you send to BigCommerce:\n\n**`POST`** `https://{store-url}}/login/token/{token}`\n\n```js\n{\n\"iss\": \"Your app’s Oauth client ID\",\n\"iat\": \"timestamp for when the token was issued\",\n\"jti\": \"randomly generated string\",\n\"operation\": \"customer_login\",\n\"store_hash\": \"abc123\",\n\"customer_id\": 1234,\n\"redirect_to\": \"/cart.php?action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n\"request_ip\": \"111.222.333.444\"\n}\n```\n\nThe `request_ip` field is optional.\n\n## Step 4: Embed Checkout\n\nUse the `embedded_checkout_url` that is returned and assemble a JSON object that will be used by the Checkout JS SDK to determine how to render the checkout. Pass the object to the `embedCheckout` method of the Checkout SDK. This will render the checkout to an HTML element with the `id` you chose.\n\nRead more about the [JSON object](https://github.com/bigcommerce/checkout-sdk-js/blob/master/docs/README.md#embedcheckout) and its possible corresponding [rendering options](https://github.com/bigcommerce/checkout-sdk-js/blob/master/docs/interfaces/embeddedcheckoutoptions.md).\n\n```html\n<div id=\"foo-bar-checkout\"></div>\n```\n\n```js\nembedCheckout({\n\"containerId\": \"foo-bar-checkout\",\n\"url\": \"https://store-id30h7ohwf.mybigcommerce.com/cart.php?embedded=1&action=loadInCheckout&id=bc218c65-7a32-4ab7-8082-68730c074d02&token=aa958e2b7922035bf3339215d95d145ebd9193deb36ae847caa780aa2e003e4b\",\n\n    }\n});\n\n```\n\nAt this point, you should have a working embedded checkout. \n\n\n## FAQ\n\n### How can I work with embedded checkout locally?\n\nIf your channel site doesn't match the URL from which you're making a request to a BigCommerce, you will get a security error and the checkout will not load. Additionally, if requests to your BigCommerce store aren't served over HTTPS, you will also see an error.\n\nOne option to work locally is to install an SSL on your local machine, and then send `https://localhost.com` at the Channel site. Use the default port 443 to be able to preview your site locally.\n\n### Are hosted payment gateways support with Embedded Checkout?\nAt this time you cannot embed checkout using a hosted payment gateway. See [Available Payment Gateways](https://support.bigcommerce.com/s/article/Available-Payment-Gateways#all-available) to determine which type of gateway you're using."}],"children":[]}}}}
