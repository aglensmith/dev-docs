{"path":"stencil-docs/storefront-customization/custom-sass-functions","templateID":0,"sharedPropsHashes":{"nav":"ZHaw9F","sidebarTree":"ne2ym","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"Stencil Docs","to":"/stencil-docs"},{"content":"Storefront Customization","to":"/stencil-docs/storefront-customization"},{"content":"Custom Sass Functions","to":"/stencil-docs/storefront-customization/custom-sass-functions"}],"page":{"meta":{"title":"Custom Sass Functions - Storefront Customization - Stencil Docs","url":"/stencil-docs/storefront-customization/custom-sass-functions","description":"Custom Sass Functions\n\n\n\nOn This Page\n\nCustom Sass Functions\n\nCompiling Custom Sass Files\n\n\n\nCustom Sass Functions\n\n\n\nCompiling Custom Sass Files\n\nIf yo..."},"title":"Custom Sass Functions","parsedPath":["pages","/stencil-docs","data","children",2,"data","children",1],"rootPagePath":"/stencil-docs","path":"/stencil-docs/storefront-customization/custom-sass-functions","isSubpage":true,"route":{"path":"/custom-sass-functions"},"data":{"blocks":[{"type":"text","data":"# Custom Sass Functions\r\n\r\n<div class=\"otp\" id=\"no-index\">\r\n\r\n### On This Page\r\n- [Custom Sass Functions](#custom-sass-functions)\r\n- [Compiling Custom Sass Files](#compiling-custom-sass-files)\r\n\r\n</div> \r\n\r\n## Custom Sass Functions\r\n\r\n| Custom Sass Function  | Description  |\r\n|-|-|\r\n| stencilColor  | `stencilColor` accepts (as a string) the key name of a color that you have defined in <span class=\"fn\">config.json</span> as editable. It returns the color’s hexadecimal value.s|\r\n| stencilFontFamily  | `stencilFontFamily` accepts (as a string) the name of a font key that you have defined in config.json. It returns the corresponding font-family value, also as a string. For a key named \"headings-font\" and defined as Google Open Sans, `stencilFontFamily` would return a value like this to Sass variables: `$headings-‐font-‐family: 'Open Sans';` (The example's name and definition in config.json are both arbitrary.) Your Sass stylesheet must call stencilFontFamily for each <span class=\"fn\">config.json</span> font key whose font-family value you want to provide to Sass variables. You would call the function in the following format (again assuming a key arbitrarily named \"headings-font\"): `$headings-font-family: stencilFontFamily(\"headings-font\");`  |\r\n| stencilFontWeight  | `stencilFontWeight` accepts (as a string) the key name of a font that you have defined in config.json. It returns (as an integer) the corresponding font-weight value. For a key arbitrarily named \"headings-font\" and defined as 700, it would return a value like this to Sass variables: `$headings-‐font-‐weight: 700;` Your Sass stylesheet may optionally call stencilFontWeight for each <span class=\"fn\">config.json</span> font key whose weight value you want to provide to Sass variables. You would call the function in the following format: `$headings-font-weight: stencilFontWeight(\"headings-font\");`  |\r\n| stencilNumber  | `stencilNumber` accepts (as a string) a key name that you have defined in config.json as editable. It also accepts (also as a string) an optional second parameter to define the unit. (This second parameter’s value defaults to `px`.) It returns the corresponding numeric value, postfixed with the defined unit. You can use this function with arithmetical operators. For example, assume that your config.json contains a `font-size` value of `3`. The following statement would evaluate to `9rem`. `stencilNumber(\"font-size\", \"rem\") * 3`  |\r\n| stencilString  | `stencilString` accepts (as a string) a key name that you have defined in <span class=\"fn\">config.json</span> as editable. It returns (also as a string) the key’s value. This function is used for purposes like defining font family names, or defining paths to images.  |\r\n| stencilImage  | `stencilImage` accepts (as a string) a key name for an image url that you have defined in <span class=\"fn\">config.json</span>. It also accepts (as a string) the key name for the image size that you have defined in <span class=\"fn\">config.json</span>. It returns the string value of the image URL and the size.  |\r\n\r\n## Compiling Custom Sass Files\r\n\r\nIf you want to add your own custom Sass files to a theme, initiate auto-compilation of those files by including the associated tag in your HTML markup. Doing this is useful for isolating your custom styles. Cornerstone's Sass file is named:\r\n\r\n<span class=\"fp\">/assets/scss/theme.scss</span>\r\n\r\nTo add a custom Sass file, place it at this path location, using an arbitrary filename prefix as shown:\r\n\r\n<span class=\"fp\">/assets/scss/foobar.scss</span>\r\n\r\nNext, import the custom file into `theme.css`.\r\n\r\n```scss\r\n@import \"foobar\";\r\n```\r\n\r\nFinally, ensure\r\n\r\n`{{stylesheet '/assets/css/theme.css'}}` is located in `templates/assets/layout/base.html/`:\r\n\r\n```handlebars\r\n<head>\r\n<!-- ... -->\r\n{{stylesheet '/assets/css/theme.css'}}\r\n<!-- ... -->\r\n</head>\r\n```\r\n\r\nWhile `stencil start` is running, it will recompile your custom Sass files to the specified <span class=\"fp\">`{theme-name}/assets/css/theme.css`</span> file. (Note that this object file’s name is always the same, and is independent of your custom Sass files’ names.) For an additional example, please see Replacing Content Blocks.\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--warning\">\r\n<div class=\"HubBlock-content\">\r\n\r\n<!-- theme: warning -->\r\n\r\n### Before You Customize\r\n> The Stencil framework is designed to support your incorporation of custom Sass files/frameworks. However, BigCommerce does not offer technical assistance on substitutions for, or customized versions of, Stencil’s default dependencies.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n"}],"children":[]}}}}
