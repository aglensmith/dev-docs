{"path":"api-docs/getting-started/webhooks/setting-up-webhooks","templateID":0,"sharedPropsHashes":{"nav":"ZHaw9F","sidebarTree":"Z427i9","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Getting Started","to":"/api-docs/getting-started"},{"content":"Webhooks","to":"/api-docs/getting-started/webhooks"},{"content":"Webhooks Tutorial","to":"/api-docs/getting-started/webhooks/setting-up-webhooks"}],"page":{"meta":{"title":"Webhooks Tutorial - Webhooks - Getting Started - API Docs","url":"/api-docs/getting-started/webhooks/setting-up-webhooks","description":"Webhooks Tutorial\n\n\n\nOn This Page\n\nPrerequisites\n\nCreate Project Folder\n\nInstall ngrok\n\nCreate Express App\n\nStart the App and ngrok\n\nTrigger the Webhook..."},"title":"Webhooks Tutorial","parsedPath":["pages","/api-docs","data","children",0,"data","children",7,"data","children",1],"rootPagePath":"/api-docs","path":"/api-docs/getting-started/webhooks/setting-up-webhooks","isSubpage":true,"route":{"path":"/setting-up-webhooks"},"data":{"blocks":[{"type":"text","data":"# Webhooks Tutorial\r\n\r\n<div class=\"otp\" id=\"no-index\">\r\n\r\n### On This Page\r\n\r\n- [Prerequisites](#prerequisites)\r\n- [Create Project Folder](#create-project-folder)\r\n- [Install ngrok](#install-ngrok)\r\n- [Create Express App](#create-express-app)\r\n- [Start the App and ngrok](#start-the-app-and-ngrok)\r\n- [Trigger the Webhook Event](#trigger-the-webhook-event)\r\n- [Adding Custom Headers](#adding-custom-headers)\r\n- [Troubleshooting](#troubleshooting)\r\n- [Resources](#resources)\r\n\r\n</div>\r\n\r\nWhen testing your application locally, ngrok is a helpful tool for viewing the webhook responses that BigCommerce sends to your app. Ngrok creates a publicly accessible tunnel URL to an application running on your machine's localhost. Ngrok also provides a web interface you can use to view HTTP request details.\r\n\r\nIn this tutorial, we'll install ngrok, register a webhook on your store, and then observe the response when the webhook event is triggered.\r\n\r\nIf you would like to follow along, we have created a Postman collection with all the requests. \r\n\r\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/3f005ed74030e01bbf7a)\r\n\r\n## Prerequisites\r\n\r\n- NPM is installed (installed automatically with Node)\r\n- Familiar with Command Line\r\n- Familiar with Postman\r\n- [API Access Token & Client ID](/api-docs/getting-started/basics/authentication#authentication_getting-api-credentials) with [scope](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes) set to Information & Settings Read-Only and Products Read-Only.\r\n- [Webhooks Overview](/api-docs/getting-started/webhooks/about-webhooks)\r\n\r\n## Create Project Folder\r\n\r\n1. Open the terminal and create a folder that will hold ngrok and the Node app, then move into that directory.\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```shell\r\nmkdir webhooks-test\r\ncd webhooks-test\r\n```\r\n\r\n## Install ngrok\r\n\r\n### Mac/Linux\r\n\r\n1. Visit https://ngrok.com/ and click download.\r\n2. Choose the version for your operating system.\r\n3. Unzip ngrok and place the application in the project folder that you created.\r\n\r\nThis can be accomplished in one command:\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```shell\r\nunzip /Users/your-computer/Downloads/ngrok-stable-darwin-amd64.zip -d /Users/your-computer/Documents/webhooks-test\r\n```\r\n\r\n### Windows\r\n\r\n1. Visit https://ngrok.com/ and click download.\r\n2. Choose the version for your operating system.\r\n3. Unzip ngrok and place the application in the project folder that you created.\r\n4. Make sure ngrok is referenced in your [PATH environment variable](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them).\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--success\">\r\n<div class=\"HubBlock-content\">\r\n    \r\n<!-- theme: success -->\r\n\r\n### Checkpoint\r\n> At this point you should have a project folder with ngrok unzipped inside of it. \r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Create Express App\r\n\r\n1. In the terminal run `npm init`. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default values.  The final screen will look something like this:\t\t \r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```json\r\n{\r\n  \"name\": \"webhooks-test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"webhooks-test\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\"\r\n}\r\n```\r\n\r\n2. Take note of the value in \"main\", `index.js`. \r\n3. Create a file in your project folder called index.js. `touch index.js` or `copy nul > index.js` for Windows.\r\n4. Install [Express](https://expressjs.com/en/starter/installing.html) using the terminal in the same project folder. `npm install express --save`\r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--success\">\r\n<div class=\"HubBlock-content\">\r\n    \r\n<!-- theme: success -->\r\n\r\n### Checkpoint\r\n> At this point your project folder should contain:\r\n* `index.js`\r\n* `node_modules`\r\n* `package.json`\r\n* `ngrok`\r\n* `package-lock.json`\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n4. Copy and paste the following into `index.js`:\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```js\r\nconst express = require('express');\r\nconst app = express();\r\n\r\n// when there's a post request to /webooks...\r\napp.post('/webhooks', function (req, res) {\r\n  \r\n  \t// respond with 200 OK\r\n    res.send('OK');\r\n});\r\n\r\napp.listen(3000, function () {\r\n    console.log('Listening for webhooks on port 3000')\r\n})\r\n```\r\n\r\nThis app listens to requests on port 3000, then 200 responds once it receives a `POST` request to `/webhooks`.\r\n\r\nFrom Express [Website](https://expressjs.com/en/starter/basic-routing.html):\r\n`app.METHOD(PATH, HANDLER)`\r\n- app is an instance of express.\r\n- METHOD is an [HTTP request method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), in lowercase.\r\n- PATH is a path on the server.\r\n- HANDLER is the function executed when the route is matched.\r\n- Res.send is the body parameter that sends the HTTP response.\r\n\r\n## Start the App and ngrok\r\n\r\n1. Open two terminal tabs. In both tabs, navigate to your project folder. \r\n2. In one tab run the app. `node index.js`\r\n3. In the other start ngrok. `./ngrok http 3000`\r\n\r\n#### node index.js\r\n\r\n```shell\r\nBIGCOMMERCE:webhooks your.computer$ node index.js\r\nListening for webhooks on port 3000\r\n```\r\n\r\n#### ngrok http 3000\r\n\r\n![ngrok running](//s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650)\r\n\r\nngrok returns two values we will need to register a webhook and observe the response: \r\n- **Web Interface:** Where you can monitor the hook from a browser. `http://127.0.0.1:4040`\r\n- **Forwarding:** The webhook destination. Make note of the https version. For example, `https://6a35e97b.ngrok.io`.\r\n\r\n4. Open a web browser and copy in your Web Interface URL: `http://127.0.0.1:4040`.  This is where webhook payloads will appear when they fire.\r\n\r\n<!--\r\n    title: #### ngrok Web Interface\r\n\r\n    data: //s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661\r\n-->\r\n\r\n#### ngrok Web Interface\r\n![#### ngrok Web Interface\r\n](//s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661 \"#### ngrok Web Interface\r\n\")\r\n\r\nSubscribe to the `store/product/updated` event: \r\n\r\n1. `POST` to `https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks`. \r\nReplace store_hash with the value from your store's API path.\r\n2. In the request body, `scope` is the webhook event we are subscribing to, and `destination` is the `ngrok` forwarding url with `/webhooks` appended (the route specified in the Express app):\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```json\r\n{\r\n \"scope\": \"store/product/updated\",\r\n \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\r\n \"is_active\": true\r\n}\r\n```\r\n\r\n1. Update the request headers to contain:\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```http\r\n    Accept: application/json\r\n    Content-Type: application/json\r\n    X-Auth-Client: {{the OAuth client id}}\r\n    X-Auth-Token: {{the OAuth token}}\r\n```\r\n\r\n4. Check all the values and then send. If successful, the response will be 201 Created.\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\">201 Created Response</div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"201 Created Response\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```json\r\n{\r\n  \"id\": 14263419,\r\n  \"client_id\": \"your-client-id\",\r\n  \"store_hash\": \"your-store-hash\",\r\n  \"scope\": \"store/product/updated\",\r\n  \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\r\n  \"headers\": null,\r\n  \"is_active\": true,\r\n  \"created_at\": 1531256030,\r\n  \"updated_at\": 1531256030\r\n}\r\n```\r\n\r\n## Trigger the Webhook Event\r\nWebhooks can be triggered by actions performed by a shopper on the storefront or user within the control panel, or actions performed via API. To illustrate this point, we'll demonstrate both methods.\r\n\r\n### Update via the Control Panel\r\n\r\n1. From your store’s control panel, navigate to Products > View. Choose a product and edit product details like name or description. \r\n2. Click **Save**.\r\n\r\n<!--\r\n    title: #### BigCommerce Control Panel\r\n\r\n    data: //s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129\r\n-->\r\n\r\n#### BigCommerce Control Panel\r\n![#### BigCommerce Control Panel\r\n](//s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129 \"#### BigCommerce Control Panel\r\n\")\r\n\r\n3. Visit the ngrok web interface address  and check for a 200 response. \r\n\r\n<!--\r\n    title: #### ngrok Web Interface\r\n\r\n    data: //s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565\r\n-->\r\n\r\n#### ngrok Web Interface\r\n![#### ngrok Web Interface\r\n](//s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565 \"#### ngrok Web Interface\r\n\")\r\n\r\nThe Summary shows that the webhook has fired and our Express app has returned a 200 response along with the text OK. The response is generated by res.send(‘OK’) in our app code, but this text can be changed to say something different or even post the response to another app. For more info, see [Express Routing](https://expressjs.com/en/guide/routing.html).\r\n\r\nThe record of the HTTP request will also show in the terminal tab running ngrok.\r\n\r\n<!--\r\n    title: #### ngrok Terminal Response\r\n\r\n    data: //s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467\r\n-->\r\n\r\n#### ngrok Terminal Response\r\n![#### ngrok Terminal Response\r\n](//s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467 \"#### ngrok Terminal Response\r\n\")\r\n\r\n### Update Via the API\r\nCreate a PUT request to the product to be updated, replacing 124 with the product’s ID: \r\n\r\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`\r\n\r\nIn this example, the price of product_id 124 is being changed to 12.99:\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```json\r\n{\r\n\t\"price\": 12.99\r\n}\r\n```\r\n\r\nAfter hitting send, check the ngrok web interface. You may see a single event or several based on how many times the product has been updated in the previous step.\r\n\r\n<!--\r\n    title: #### ngrok Web Interface\r\n\r\n    data: //s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256\r\n-->\r\n\r\n#### ngrok Web Interface\r\n![#### ngrok Web Interface\r\n](//s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256 \"#### ngrok Web Interface\r\n\")\r\n\r\nThat’s it! In this walkthrough you created a webhook, set up a server to accept the response, and used ngrok to observe the webhook payload.\r\n\r\nWant to keep going? Try changing the text in `res.send()` to a custom response, print the response to a webpage, or register a different webhook event. \r\n\r\n<div class=\"HubBlock--callout\">\r\n<div class=\"CalloutBlock--warning\">\r\n<div class=\"HubBlock-content\">\r\n    \r\n<!-- theme: warning -->\r\n\r\n### URL Timeout\r\n> Unless you have a paid ngrok account, the destination URL will only be valid for a few hours. After that, the webhook will stop working. Send a DELETE request to the specific webhook ID to disable the hook. \r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n## Adding Custom Headers\r\nFor added security you can add custom headers to your webhook request. `headers` accepts any key:value pair as a string. \r\n\r\n<!--\r\ntitle: \"Example Webhook Custom Headers\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n**Example Webhook Custom Headers**\r\n\r\n```json\r\n{\r\n\"scope\": \"store/cart/lineItem/*\",\r\n  \"destination\": \"https://myapp.herokuapp.com/\",\r\n  \"is_active\": true,\r\n  \"headers\": {\r\n  \t\"User-Name\": \"Hello\",\r\n  \t\"Password\": \"Goodbye\"\r\n  }\r\n  \t\r\n}\r\n```\r\n\r\n## Troubleshooting\r\n\r\n**Getting a 404 error using the root (/) url?**\r\n\r\nAdd this snippet to your code to respond to incoming get requests with 'hello':\r\n\r\n<div class=\"HubBlock-header\">\r\n    <div class=\"HubBlock-header-title flex items-center\">\r\n        <div class=\"HubBlock-header-name\"></div>\r\n    </div><div class=\"HubBlock-header-subtitle\"></div>\r\n</div>\r\n\r\n<!--\r\ntitle: \"\"\r\nsubtitle: \"\"\r\nlineNumbers: true\r\n-->\r\n\r\n```js\r\napp.get('/',(req, res)=>{\r\n    res.send('Hello!');\r\n}); \r\n```\r\n\r\n**Getting error ngrok not found?**\r\n\r\nThere are two ways to fix this. Your local setup will determine which command will work.\r\nUse the command `mv ngrok /usr/local/bin `to move ngrok to your local bin folder. This way it becomes available globally. \r\nUse the command `./ngrok http 3000` to run ngrok as a sudo user. \r\n\r\n<br>\r\n\r\n**Windows Users**\r\n\r\nIf you are having trouble getting ngrok started try setting the PATH. \r\n    - [What are PATH and other environment variables, and how can I set or use them?](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)\r\n\r\n## Resources\r\n* [Webhooks Overview](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/about-webhooks)\r\n* [Webhook Events](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events)\r\n* [Webhooks Reference](https://developer.bigcommerce.com/api-reference/webhooks)\r\n"}],"children":[]}}}}
