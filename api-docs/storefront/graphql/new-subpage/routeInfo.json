{"path":"api-docs/storefront/graphql/new-subpage","templateID":0,"sharedPropsHashes":{"nav":"ZHaw9F","sidebarTree":"Z427i9","namespace":"Zd6xn0"},"localProps":{"version":"1.3","crumbs":[{"content":"API Docs","to":"/api-docs"},{"content":"Storefront","to":"/api-docs/storefront"},{"content":"GraphQL","to":"/api-docs/storefront/graphql"},{"content":"Product List Example","to":"/api-docs/storefront/graphql/new-subpage"}],"page":{"meta":{"title":"Product List Example - GraphQL - Storefront - API Docs","url":"/api-docs/storefront/graphql/new-subpage","description":"\n"},"title":"Product List Example","parsedPath":["pages","/api-docs","data","children",5,"data","children",0,"data","children",4],"rootPagePath":"/api-docs","path":"/api-docs/storefront/graphql/new-subpage","isSubpage":true,"route":{"path":"/new-subpage"},"data":{"blocks":[{"type":"html","data":"<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n\n<div class=\"container-fluid\">\n        <h1 class=\"display-4\" id=\"main-title\">Bootstrap + Vanilla JS Storefront API Example</h1>\n\n        <p id=\"customer\"></p>\n\n        <!-- Getting started content, will be hidden upon success of an API request -->\n        <div id=\"getting-started\">\n          <p class=\"lead\">This example shows how a static HTML site can be used to render dynamic product information using BigCommerce's GraphQL Storefront API. GraphQL connection details are accepted as URL parameters. View the source of this example <a href=\"https://github.com/bigcommerce/storefront-api-examples/blob/master/html-bootstrap-vanillajs/index.html\">here.</a></p>\n\n          <p class=\"lead\">To get started, you can simply <strong>click submit</strong> with the sample data below to see the API in action. If you want to see this page with your own store's data, you can <a href=\"https://developer.bigcommerce.com/api-reference/storefront/storefront-token-api/storefront-api-auth/createtoken\" target=\"_blank\">create a token</a> on your store and put it in the form below. Make sure you create a token valid for this page's origin: <code id=\"page-origin\"></code><p>\n\n          <form method=\"get\" id=\"form\">\n            <div class=\"form-group\">\n              <label>Store URL</label>\n              <input id=\"store-url-field\" type=\"text\" class=\"form-control\" placeholder=\"Enter Store URL\" name=\"store_url\" value=\"https://buybutton.store\">\n              <small class=\"form-text text-muted\">Enter the URL of your store's storefront - this will be used to run GraphQL requests against the right store. Use the HTTPS version.</small>\n            </div>\n            <div class=\"form-group\">\n              <label>Storefront API Token</label>\n              <input id=\"api-token-field\" type=\"text\" class=\"form-control\" placeholder=\"Enter Storefront API Token\" name=\"token\" value=\"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJlYXQiOjE3NjMyMzYwNjMsInN1Yl90eXBlIjoyLCJ0b2tlbl90eXBlIjoxLCJjb3JzIjpbImh0dHBzOi8vZGV2ZWxvcGVyLmJpZ2NvbW1lcmNlLmNvbSJdLCJjaWQiOjEsImlhdCI6MTU3Mzg0NzMwMywic3ViIjoiM3dtZThrcWtrNjQwNzZueWljMGkzamk0NG5wajQ2byIsInNpZCI6OTk5MzMxNzg0LCJpc3MiOiJCQyJ9.jJPG0H0ewCRLeBC0dDB9ZuAm68v1I_a2NPRLDNSDswKML4GLVFImN8NxHCyVC-yjfiWwgz4Iw2ngaHJ7TI14dA\">\n              <small class=\"form-text text-muted\">NOTE: This is NOT the same as your OAuth API Access Token.</small>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"submit-button\">Submit</button>\n          </form>\n        </div>\n\n        <!-- Loading message or spinner -->\n        <div class=\"alert alert-danger d-none\" role=\"alert\" id=\"error-message\">\n        </div>\n\n        <!-- Main product listing element, to be filled out with product data from the API -->\n        <div class=\"card-group\" id=\"product-listing\">\n        </div>\n      </div>\n\n        <script>\n        const pageUrl = new URL(window.location);\n        const searchParams = pageUrl.searchParams;\n        // Inject the current page origin into the getting started text so it will be correct for the current context\n        document.getElementById(\"page-origin\").innerHTML = pageUrl.origin;\n        /*\n            Utility functions for rendering\n        */\n        // Based on the browser locale, provide a localized price\n        function formatLocalizedPrice (price) {\n            return new Intl.NumberFormat(navigator.language, {style: 'currency', currency: price.currencyCode}).format(price.value);\n        }\n        // Create a srcset string for responsive images\n        function renderSrcset(image) {\n            return `${image.img320px} 320w, ${image.img640px} 640w, ${image.img960px} 960w, ${image.img1280px} 1280w`\n        }\n        // Function to strip HTML from product descriptions, leaving just the text\n        function stripHtml(html){\n           var doc = new DOMParser().parseFromString(html, 'text/html');\n           return doc.body.textContent || \"\";\n        }\n        /*\n            Page rendering logic\n        */\n        function renderPage(data) {\n            // Set up the add-to-cart-url format\n            const addToCartURLFormat = `${data.site.settings.url.vanityUrl}/cart.php?action=add&product_id=`\n            // Render the HTML for the product listing by looping over each product in the response\n            document.getElementById('product-listing').innerHTML = `${data.site.products.edges.map(node => renderProduct(node.product, addToCartURLFormat)).reduce((productsHtml, productHtml) => productsHtml += productHtml)}`;\n        }\n        function renderProduct(product, addToCartURLFormat) {\n            // Render the product into a bootstrap \"card\"\n            return `\n                <div class=\"card\" style=\"min-width: 25%;\">\n                ${product.defaultImage ? `<img loading=\"lazy\" class=\"card-img-top\" style=\"min-height: 25%; object-fit: contain;\" src=\"${product.defaultImage.img960px}\" srcset=\"${renderSrcset(product.defaultImage)}\" alt=\"${product.defaultImage.altText}\">` : ''\n                 }\n                <div class=\"card-body\">\n                  <h5 class=\"card-title\">${product.name} ${renderPrice(product.prices)}</h5>\n                  <p class=\"card-text text-truncate\">${stripHtml(product.description)}</p>\n                  \n                  <a href=\"${addToCartURLFormat}${product.entityId}\" class=\"btn btn-primary\">Add to cart</a>\n                </div>\n              </div>`\n        }\n        function renderPrice(prices) {\n            // Render the price component from the supplied prices\n            return `<span class=\"card-text text-muted\">(${prices.retailPrice ? `<del><span class=\"font-italic\">${formatLocalizedPrice(prices.price)}</span></del> ` : ''}${formatLocalizedPrice(prices.price)})</span>`\n        }\n        /*\n            API fetching\n        */\n        function getProductAndSiteInfo(params) {\n            const storeUrl = new URL(params.store_url);\n            // Use the store's canonical URL which should always resolve\n            const graphQLUrl = `${storeUrl.origin}/graphql`;\n            // Set up GraphQL query\n            // If specific product IDs were supplied, fetch them, else just get the first few products\n            const graphQLQuery = `\n                query StaticSiteExample {\n                  customer {\n                  \tfirstName\n                  \tlastName\n\t\t\t\t    email\n\t\t\t\t  }\n                  site {\n                    products${params.product_ids ? `(entityIds:[${params.product_ids}])` : ''} {\n                      edges {\n                        product: node {\n                          ...ProductFields\n                        }\n                      }\n                    }\n                    settings {\n                      storeName\n                      url {\n                        vanityUrl\n                      }\n                    }\n                  }\n                }\n                fragment ProductFields on Product {\n                  id\n                  entityId\n                  name\n                  sku\n                  path\n                  description\n                  defaultImage {\n                    img320px: url(width: 320)\n                    img640px: url(width: 640)\n                    img960px: url(width: 960)\n                    img1280px: url(width: 1280)\n                    altText\n                  }\n                  prices {\n                    price {\n                      value\n                      currencyCode\n                    }\n                    retailPrice {\n                      value\n                      currencyCode\n                    }\n                  }\n                }`\n            // Fetch data from the GraphQL Storefront API\n            return fetch(graphQLUrl, {\n              method: 'POST',\n              credentials: 'include',\n              mode: 'cors',\n              headers: { 'Content-Type': 'application/json',\n                       'Authorization': `Bearer ${params.token}`},\n              body: JSON.stringify({ query: graphQLQuery}),\n            })\n            .then(res => res.json())\n            .then(res => res.data);\n        }\n        // Set up default params\n        let params = {\n            store_url: null,\n            product_ids: null,\n            token: null\n        };\n        // Fill in supplied URL params\n        Object.keys(params).forEach(function (key) {\n            if (searchParams.get(key)) {\n                params[key] = searchParams.get(key);\n            }\n        });\n        // Check for required parameters, throw an error if they're not found\n        if (!(params.store_url && params.token)) {\n            throw new Error('At least one of the required URL parameters (Store URL, Token) was not supplied or was invalid');\n        } else {\n            // Put the supplied parameters into the form so it can easily re-submitted\n            document.getElementById('store-url-field').value = params.store_url;\n            document.getElementById('api-token-field').value = params.token;\n            // It seems like the required parameters were supplied, try to load the product data from the Storefront API\n            getProductAndSiteInfo(params).then(data => {\n                // With our data loaded, render the product listing\n                renderPage(data);\n                // Set the header to the name of the store\n                document.getElementById('main-title').textContent = `${data.site.settings.storeName}`;\n                document.title = `${data.site.settings.storeName}`;\n                // Render the customer information if there's a session\n                document.getElementById('customer').innerHTML = `${data.customer ? `Logged in as ${data.customer.firstName} ${data.customer.lastName} (${data.customer.email}) <a href=\"${params.store_url}/login.php?action=logout\" class=\"badge badge-danger\">Sign out</a>` : ''}`;\n                // Hide the getting started content\n                document.getElementById('getting-started').classList.add('d-none');\n            }).catch(e => {\n              // Some error was encountered\n              document.getElementById('error-message').textContent = `Error returned from API: - check that your store url and API token are valid, and that your token's CORS origin is correctly configured. Check the browser console for more details of this error.`;\n              errorMessageElement.classList.replace('d-none', 'd-flex');\n              throw(e);\n            });\n        }\n        </script>\n"}],"children":[]}}}}
